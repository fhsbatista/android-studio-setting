<templateSet group="Custom templates">
  <template name="concom" value="/** Related to &quot;$YOURCOMMENT$&quot; **/" description="A cool way to write comments that organize interfaces function on contracts" toReformat="false" toShortenFQNames="true">
    <variable name="YOURCOMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="onc" value="fun onClick$THING$()" description="to create interface functions related to clicks of view" toReformat="false" toShortenFQNames="true">
    <variable name="THING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="xmlcom" value="&lt;!--$YOUCOMMENT$--&gt;" description="Comments for xml" toReformat="false" toShortenFQNames="true">
    <variable name="YOUCOMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="str" value="&lt;string name=&quot;signup_personal_data_hint_$YOURSTRINGNAME$&quot;&gt;$YOURSTRING$&lt;/string&gt;" description="String generator" toReformat="false" toShortenFQNames="true">
    <variable name="YOURSTRINGNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="YOURSTRING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="datp" value="var $PROPNAME$: $PROPTYPE$?," description="data class propertie" toReformat="false" toShortenFQNames="true">
    <variable name="PROPNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROPTYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="nstr" value="private var $PROPNAME$: String? = null" description="creates a nullable string prop" toReformat="false" toShortenFQNames="true">
    <variable name="PROPNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="createAdapter" value="class $NOMEDOADAPTER$Adapter(context: Context) : SimpleBaseRecyclerViewAdapter(context) {&#10;&#10;var list: List&lt;$TIPODOITEM$&gt; = listOf()&#10;        set(value) {&#10;            field = value&#10;            notifyDataSetChanged()&#10;        }&#10;&#10;override val displayableItemsCount: Int&#10;        get() = list.size&#10;&#10;    override fun onBindRecyclerViewHolder(holder: RecyclerView.ViewHolder, position: Int) {&#10;        (holder as ItemViewHolder).bind(list[position])&#10;    }&#10;&#10;    override fun getItemViewHolder(parent: ViewGroup): RecyclerView.ViewHolder {&#10;        val view = LayoutInflater.from(context).inflate(R.layout.$NOMEDOLAYOUT$, parent, false)&#10;        return ItemViewHolder(view)&#10;    }&#10;    &#10;    inner class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        fun bind(item: $TIPODOITEM$) {&#10;            &#10;        }&#10;    }&#10;&#10;&#10;}" description="cria um adapter" toReformat="false" toShortenFQNames="true">
    <variable name="NOMEDOADAPTER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TIPODOITEM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NOMEDOLAYOUT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>